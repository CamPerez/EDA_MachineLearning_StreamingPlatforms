testing_set = testing_set[, c(2, 3, 1)]
# Ajustar el modelo de SVM con el conjunto de entrenamiento.
classifier = svm(formula = Age ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
# Ajustar el modelo de SVM con el conjunto de entrenamiento.
classifier = svm(formula = Age ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-2])
library(caTools)
data = movies %>%
filter(PrimeVideo == 1 | Disney == 1) %>%
select(-ID, -Title, -Director, -Genres, -Country, -Language, -Hulu, -Netflix)
data[,-2] <- data.frame(lapply(data[,-2], function(x) as.numeric(as.character(x))))
set.seed(110)
split = sample.split(data$Age, SplitRatio = 0.5)
training_set = subset(data, split == TRUE)
testing_set = subset(data, split == FALSE)
# Escalado de valores
training_set[,-2] = scale(training_set[,-2])
testing_set[,-2] = scale(testing_set[,-2])
# Proyección de las componentes principales
# install.packages("caret")
library(caret)
# install.packages("e1071")
library(e1071)
pca = preProcess(x = training_set[,-2], method = "pca", pcaComp = 2)
training_set = predict(pca, training_set)
training_set = training_set[, c(2, 3, 1)]
testing_set = predict(pca, testing_set)
testing_set = testing_set[, c(2, 3, 1)]
# Ajustar el modelo de SVM con el conjunto de entrenamiento.
classifier = svm(formula = Age ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-2])
#Export movies dataset, delete unused columns and change column names
movies = read.csv("data/movies.csv", encoding = "UTF-8", na.strings=c("",NA)) %>%
select(-Rotten.Tomatoes, -X) %>%
rename(
MediaType = Type,
Disney = Disney.,
PrimeVideo = Prime.Video,
Director = Directors,
Genre = Genres
) %>%
mutate(Genres = Genre)
#Export tv shows data set
tvshows = read.csv("data/tv_shows.csv", encoding = "UTF-8", na.strings=c("", NA)) %>%
select(-Rotten.Tomatoes) %>%
rename(
ID = X,
MediaType = type,
Disney = Disney.,
PrimeVideo = Prime.Video
)
tvshows$ID = paste("tv", tvshows$ID, sep="_")
movies$ID = paste("mv", movies$ID, sep="_")
Mode <- function(x) {
ux <- na.omit(unique(x, na.rm = TRUE))
ux[which.max(tabulate(match(x, ux)))]
}
#Change IMDb's NA for the mean score
sum(is.na(movies$IMDb))
movies$IMDb = ifelse(is.na(movies$IMDb),
ave(movies$IMDb, FUN = function(x) round(mean(x, na.rm = TRUE),2)),
movies$IMDb)
sum(is.na(tvshows$IMDb))
tvshows$IMDb = ifelse(is.na(tvshows$IMDb),
ave(tvshows$IMDb, FUN = function(x) round(mean(x, na.rm = TRUE),2)),
tvshows$IMDb)
#Change Age's NA for the mode
tvshows$Age = ifelse(is.na(tvshows$Age), Mode(tvshows$Age), tvshows$Age)
movies$Age = ifelse(is.na(movies$Age), Mode(tvshows$Age), movies$Age)
#Change Runtime's NA for the mode
sum(is.na(movies$Runtime))
movies$Runtime = ifelse(is.na(movies$Runtime), Mode(movies$Runtime), movies$Runtime)
#Change Director, Genre, Country and Language NA for "Unknown"
movies$Director = ifelse(is.na(movies$Director), "Unknown", movies$Director)
movies$Country = ifelse(is.na(movies$Country), "Unknown", movies$Country)
movies$Language = ifelse(is.na(movies$Language), "Unknown", movies$Language)
movies$Genre = ifelse(is.na(movies$Genre), "Unknown", movies$Genre)
movies$Genres = ifelse(is.na(movies$Genres), "Unknown", movies$Genres)
#Binary Variables to Factor
movies = movies %>%
mutate_at(c("Age", "MediaType", "Netflix", "PrimeVideo", "Disney", "Hulu"), factor)
tvshows = tvshows %>%
mutate_at(6:10, factor)
#Create new dataset with movies and tv shows
fullcatalog = bind_rows(movies, tvshows) %>%
select(-Director, -Country, -Language, -Runtime, -Genres, -Genre)
#Separate movie genre in multiple binary variables
movies = movies %>%
separate_rows(Genre, sep = ",") %>%
mutate(Value = 1) %>%
spread(Genre, Value, fill = 0) %>%
select(-MediaType, -Unknown)
#Binary Variables to Factor
movies = movies %>%
mutate_at(15:41, factor)
library(caTools)
data = movies %>%
filter(PrimeVideo == 1 | Disney == 1) %>%
select(-ID, -Title, -Director, -Genres, -Country, -Language, -Hulu, -Netflix)
data[,-2] <- data.frame(lapply(data[,-2], function(x) as.numeric(as.character(x))))
set.seed(110)
split = sample.split(data$Age, SplitRatio = 0.5)
training_set = subset(data, split == TRUE)
testing_set = subset(data, split == FALSE)
# Escalado de valores
training_set[,-2] = scale(training_set[,-2])
testing_set[,-2] = scale(testing_set[,-2])
# Proyección de las componentes principales
# install.packages("caret")
library(caret)
# install.packages("e1071")
library(e1071)
pca = preProcess(x = training_set[,-2], method = "pca", pcaComp = 2)
training_set = predict(pca, training_set)
training_set = training_set[, c(2, 3, 1)]
testing_set = predict(pca, testing_set)
testing_set = testing_set[, c(2, 3, 1)]
# Ajustar el modelo de SVM con el conjunto de entrenamiento.
classifier = svm(formula = Age ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-2])
# Ajustar el modelo de SVM con el conjunto de entrenamiento.
classifier = svm(formula = Age ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
# Ajustar el modelo de SVM con el conjunto de entrenamiento.
classifier = svm(formula = Age ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-2])
library(caTools)
data = movies %>%
filter(PrimeVideo == 1 | Disney == 1) %>%
pivot_wider(
names_from = "Age",
values_from = 'Age',
values_fill = 0,
values_fn = function(x) 1) %>%
select(-all, -ID, -Title, -Director, -Genres, -Country, -Language, -Hulu, -Netflix)
data <- data.frame(lapply(data, function(x) as.numeric(as.character(x))))
data$Disney = as.factor(data$Disney)
set.seed(110)
split = sample.split(data$Disney, SplitRatio = 0.7)
training_set = subset(data, split == TRUE)
testing_set = subset(data, split == FALSE)
# Escalado de valores
training_set[,-4] = scale(training_set[,-4])
testing_set[,-4] = scale(testing_set[,-4])
# Proyección de las componentes principales
# install.packages("caret")
library(caret)
# install.packages("e1071")
library(e1071)
pca = preProcess(x = training_set[,-4], method = "pca", pcaComp = 2)
training_set = predict(pca, training_set)
training_set = training_set[, c(2, 3, 1)]
testing_set = predict(pca, testing_set)
testing_set = testing_set[, c(2, 3, 1)]
# Ajustar el modelo de SVM con el conjunto de entrenamiento.
classifier = svm(formula = Disney ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
library(caTools)
data = movies %>%
filter(PrimeVideo == 1 | Disney == 1) %>%
pivot_wider(
names_from = "Age",
values_from = 'Age',
values_fill = 0,
values_fn = function(x) 1) %>%
select(-all, -ID, -Title, -Director, -Genres, -Country, -Language, -Hulu, -Netflix)
data <- data.frame(lapply(data, function(x) as.numeric(as.character(x))))
data$Disney = as.factor(data$Disney)
set.seed(110)
split = sample.split(data$Disney, SplitRatio = 0.7)
training_set = subset(data, split == TRUE)
testing_set = subset(data, split == FALSE)
# Escalado de valores
training_set[,-4] = scale(training_set[,-4])
testing_set[,-4] = scale(testing_set[,-4])
# Proyección de las componentes principales
# install.packages("caret")
library(caret)
# install.packages("e1071")
library(e1071)
pca = preProcess(x = training_set[,-4], method = "pca", pcaComp = 2)
training_set = predict(pca, training_set)
training_set = training_set[, c(2, 3, 1)]
testing_set = predict(pca, testing_set)
testing_set = testing_set[, c(2, 3, 1)]
# Ajustar el modelo de SVM con el conjunto de entrenamiento.
classifier = svm(formula = Disney ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-3])
# Crear la matriz de confusión
cm = table(testing_set[, 3], y_pred)
# Visualización del conjunto de entrenamiento
#install.packages("ElemStatLearn")
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.025)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.025)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Conjunto de Entrenamiento)',
xlab = 'CP1', ylab = 'CP2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid==1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3]==2, 'blue3',
ifelse(set[, 3] == 1, 'green4', 'red3')))
# Visualización del conjunto de testing
set = testing_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.02)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.02)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Conjunto de Testing)',
xlab = 'CP1', ylab = 'CP2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid== 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(caTools)
data = movies %>%
filter(PrimeVideo == 1 | Disney == 1) %>%
pivot_wider(
names_from = "Age",
values_from = 'Age',
values_fill = 0,
values_fn = function(x) 1) %>%
select(-all, -ID, -Title, -Director, -Genres, -Country, -Language, -Hulu, -Netflix)
data <- data.frame(lapply(data, function(x) as.numeric(as.character(x))))
data$Disney = as.factor(data$Disney)
set.seed(110)
split = sample.split(data$Disney, SplitRatio = 0.8)
training_set = subset(data, split == TRUE)
testing_set = subset(data, split == FALSE)
# Escalado de valores
training_set[,-4] = scale(training_set[,-4])
testing_set[,-4] = scale(testing_set[,-4])
# Proyección de las componentes principales
# install.packages("caret")
library(caret)
# install.packages("e1071")
library(e1071)
pca = preProcess(x = training_set[,-4], method = "pca", pcaComp = 2)
training_set = predict(pca, training_set)
training_set = training_set[, c(2, 3, 1)]
testing_set = predict(pca, testing_set)
testing_set = testing_set[, c(2, 3, 1)]
# Ajustar el modelo de SVM con el conjunto de entrenamiento.
classifier = svm(formula = Disney ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-3])
# Crear la matriz de confusión
cm = table(testing_set[, 3], y_pred)
library(caTools)
data = movies %>%
filter(PrimeVideo == 1 | Disney == 1) %>%
select(-ID, -Title, -Director, -Genres, -Country, -Language, -Hulu, -Netflix)
data[,-2] <- data.frame(lapply(data[,-2], function(x) as.numeric(as.character(x))))
set.seed(110)
split = sample.split(data$Age, SplitRatio = 0.7)
training_set = subset(data, split == TRUE)
testing_set = subset(data, split == FALSE)
# Escalado de valores
training_set[,-2] = scale(training_set[,-2])
testing_set[,-2] = scale(testing_set[,-2])
# Proyección de las componentes principales
# install.packages("caret")
library(caret)
# install.packages("e1071")
library(e1071)
pca = preProcess(x = training_set[,-2], method = "pca", pcaComp = 2)
training_set = predict(pca, training_set)
training_set = training_set[, c(2, 3, 1)]
testing_set = predict(pca, testing_set)
testing_set = testing_set[, c(2, 3, 1)]
# Ajustar el modelo de SVM con el conjunto de entrenamiento.
classifier = svm(formula = Age ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-3])
# Crear la matriz de confusión
cm = table(testing_set[,3], y_pred)
library(caTools)
data = movies %>%
filter(PrimeVideo == 1 | Disney == 1) %>%
select(-ID, -Title, -Director, -Genres, -Country, -Language, -Hulu, -Netflix)
data[,-2] <- data.frame(lapply(data[,-2], function(x) as.numeric(as.character(x))))
set.seed(110)
split = sample.split(data$Age, SplitRatio = 0.6)
training_set = subset(data, split == TRUE)
testing_set = subset(data, split == FALSE)
# Escalado de valores
training_set[,-2] = scale(training_set[,-2])
testing_set[,-2] = scale(testing_set[,-2])
# Proyección de las componentes principales
# install.packages("caret")
library(caret)
# install.packages("e1071")
library(e1071)
pca = preProcess(x = training_set[,-2], method = "pca", pcaComp = 2)
training_set = predict(pca, training_set)
training_set = training_set[, c(2, 3, 1)]
testing_set = predict(pca, testing_set)
testing_set = testing_set[, c(2, 3, 1)]
# Ajustar el modelo de SVM con el conjunto de entrenamiento.
classifier = svm(formula = Age ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-3])
# Crear la matriz de confusión
cm = table(testing_set[,3], y_pred)
library(caTools)
data = movies %>%
filter(PrimeVideo == 1 | Disney == 1) %>%
select(-ID, -Title, -Director, -Genres, -Country, -Language, -Hulu, -Netflix)
data[,-2] <- data.frame(lapply(data[,-2], function(x) as.numeric(as.character(x))))
set.seed(110)
split = sample.split(data$Age, SplitRatio = 0.5)
training_set = subset(data, split == TRUE)
testing_set = subset(data, split == FALSE)
# Escalado de valores
training_set[,-2] = scale(training_set[,-2])
testing_set[,-2] = scale(testing_set[,-2])
# Proyección de las componentes principales
# install.packages("caret")
library(caret)
# install.packages("e1071")
library(e1071)
pca = preProcess(x = training_set[,-2], method = "pca", pcaComp = 2)
training_set = predict(pca, training_set)
training_set = training_set[, c(2, 3, 1)]
testing_set = predict(pca, testing_set)
testing_set = testing_set[, c(2, 3, 1)]
# Ajustar el modelo de SVM con el conjunto de entrenamiento.
classifier = svm(formula = Age ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-3])
# Crear la matriz de confusión
cm = table(testing_set[,3], y_pred)
# Visualización del conjunto de entrenamiento
#install.packages("ElemStatLearn")
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.025)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.025)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Conjunto de Entrenamiento)',
xlab = 'CP1', ylab = 'CP2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid=="+13", 'deepskyblue',
ifelse(y_grid == "+7", 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3]=="+13", 'blue3',
ifelse(set[, 3] ==  "+7", 'green4', 'red3')))
# Visualización del conjunto de testing
set = testing_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.02)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.02)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Conjunto de Testing)',
xlab = 'CP1', ylab = 'CP2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid=="+13", 'deepskyblue',
ifelse(y_grid == "+7", 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3]=="+13", 'blue3',
ifelse(set[, 3] == "+7", 'green4', 'red3')))
cm
y_grid
library(caTools)
data = movies %>%
filter(PrimeVideo == 1 | Disney == 1) %>%
select(-ID, -Title, -Director, -Genres, -Country, -Language, -Hulu, -Netflix)
data[,-2] <- data.frame(lapply(data[,-2], function(x) as.numeric(as.character(x))))
set.seed(110)
split = sample.split(data$Age, SplitRatio = 0.5)
training_set = subset(data, split == TRUE)
testing_set = subset(data, split == FALSE)
# Escalado de valores
training_set[,-2] = scale(training_set[,-2])
testing_set[,-2] = scale(testing_set[,-2])
# Proyección de las componentes principales
# install.packages("caret")
library(caret)
# install.packages("e1071")
library(e1071)
pca = preProcess(x = training_set[,-2], method = "pca", pcaComp = 2)
training_set = predict(pca, training_set)
training_set = training_set[, c(2, 3, 1)]
testing_set = predict(pca, testing_set)
testing_set = testing_set[, c(2, 3, 1)]
# Ajustar el modelo de SVM con el conjunto de entrenamiento.
classifier = svm(formula = Age ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-3])
# Crear la matriz de confusión
cm = table(testing_set[,3], y_pred)
# Visualización del conjunto de entrenamiento
#install.packages("ElemStatLearn")
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.025)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.025)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Conjunto de Entrenamiento)',
xlab = 'CP1', ylab = 'CP2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid=="13+", 'deepskyblue',
ifelse(y_grid == "7+", 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3]=="+13", 'blue3',
ifelse(set[, 3] ==  "7+", 'green4', 'red3')))
# Visualización del conjunto de testing
set = testing_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.02)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.02)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Conjunto de Testing)',
xlab = 'CP1', ylab = 'CP2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid=="13+", 'deepskyblue',
ifelse(y_grid == "7+", 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3]=="13+", 'blue3',
ifelse(set[, 3] == "7+", 'green4', 'red3')))
require(devtools)
install_version("ElemenStat", version = "2015.6.26", repos = "http://cran.us.r-project.org")
require(devtools)
install_version("ElemStatLearn", version = "2015.6.26", repos = "http://cran.us.r-project.org")
install_version("ElemStatLearn", version = "2015.6.26.2", repos = "http://cran.us.r-project.org")
uninstall.packages(ElemStatLearn)
uninstall.packages("ElemStatLearn")
uninstall.packages(c("ElemStatLearn", "plyr"))
remove.packages(ElemStatLearn)
remove.packages("ElemStatLearn", lib="~/R/win-library/4.0")
install_version("ElemStatLearn", version = "2015.6.26.2", repos = "http://cran.us.r-project.org/%22)
)
)
c<sc
c
scs
cs
require(devtools)
install_version("ElemStatLearn", version = "2015.6.26", repos = "http://cran.us.r-project.org")
require(devtools)
install_version("ElemStatLearn", version = "2015.6.26.2", repos = "http://cran.us.r-project.org")
install_version("ElemStatLearn", version = "2015.6.26.2", repos = "http://cran.us.r-project.org")
require(devtools)
install_version("ElemStatLearn", version = "2015.6.26.2", repos = "http://cran.us.r-project.org")
install_version("ElemStatLearn", version = "2015.6.26", repos = "http://cran.us.r-project.org")
reticulate::virtualenv_create('shiny_environment', python = "python3")
reticulate::virtualenv_install("shiny_environment", packages = PYTHON_DEPENDENCIES, ignore_installed=TRUE)
PYTHON_DEPENDENCIES = c('pandas', 'numpy')
reticulate::virtualenv_install("shiny_environment", packages = PYTHON_DEPENDENCIES, ignore_installed=TRUE)
Sys.getenv('VIRTUALENV_NAME')
Sys.getenv('PYTHON_PATH')
setwd("~/Master/Tecnologias/Proyectos/DataAnalysis_StreamingPlatforms/StreamingPlatforms")
shiny::runApp()
